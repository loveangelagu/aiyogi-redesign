{"ast":null,"code":"var _jsxFileName = \"/Users/angelagu/Downloads/aiyogi-main/src/pages/home/components/TTSComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TTSComponent = () => {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const speakResponse = async inputText => {\n    try {\n      setIsSpeaking(true);\n      const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n      const url = \"https://api.openai.com/v1/audio/speech\";\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4o-mini-tts\",\n          // or \"tts-1-hd\"\n          voice: \"nova\",\n          // coral, nova, shimmer, etc.\n          input: inputText\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Error response:\", errorText);\n        throw new Error(\"Failed to generate speech\");\n      }\n      const audioBlob = await response.blob();\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      audio.play();\n      audio.onended = () => setIsSpeaking(false);\n    } catch (error) {\n      console.error(\"Error in TTS:\", error);\n      setIsSpeaking(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tts-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Enter text to speak\",\n      rows: \"4\",\n      cols: \"50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => speakResponse(text),\n        disabled: isSpeaking,\n        className: \"speak-btn\",\n        children: isSpeaking ? \"Speaking...\" : \"Speak\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(TTSComponent, \"/IdEFFTBK7q4vYNcMda3cE55F6Q=\");\n_c = TTSComponent;\nexport default TTSComponent;\nvar _c;\n$RefreshReg$(_c, \"TTSComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TTSComponent","_s","text","setText","isSpeaking","setIsSpeaking","speakResponse","inputText","apiKey","process","env","REACT_APP_OPENAI_API_KEY","url","response","fetch","method","headers","Authorization","body","JSON","stringify","model","voice","input","ok","errorText","console","error","Error","audioBlob","blob","audioUrl","URL","createObjectURL","audio","Audio","play","onended","className","children","value","onChange","e","target","placeholder","rows","cols","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/angelagu/Downloads/aiyogi-main/src/pages/home/components/TTSComponent.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst TTSComponent = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n\r\n  const speakResponse = async (inputText) => {\r\n    try {\r\n      setIsSpeaking(true);\r\n\r\n      const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\r\n      const url = \"https://api.openai.com/v1/audio/speech\";\r\n\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"gpt-4o-mini-tts\", // or \"tts-1-hd\"\r\n          voice: \"nova\", // coral, nova, shimmer, etc.\r\n          input: inputText,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(\"Error response:\", errorText);\r\n        throw new Error(\"Failed to generate speech\");\r\n      }\r\n\r\n      const audioBlob = await response.blob();\r\n      const audioUrl = URL.createObjectURL(audioBlob);\r\n      const audio = new Audio(audioUrl);\r\n      audio.play();\r\n\r\n      audio.onended = () => setIsSpeaking(false);\r\n    } catch (error) {\r\n      console.error(\"Error in TTS:\", error);\r\n      setIsSpeaking(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tts-component\">\r\n      <textarea\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n        placeholder=\"Enter text to speak\"\r\n        rows=\"4\"\r\n        cols=\"50\"\r\n      />\r\n      <div>\r\n        <button\r\n          onClick={() => speakResponse(text)}\r\n          disabled={isSpeaking}\r\n          className=\"speak-btn\"\r\n        >\r\n          {isSpeaking ? \"Speaking...\" : \"Speak\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TTSComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}