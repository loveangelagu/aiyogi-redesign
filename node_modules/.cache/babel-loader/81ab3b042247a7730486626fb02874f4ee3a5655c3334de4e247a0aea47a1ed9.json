{"ast":null,"code":"import { post, stream } from \"../../services/api\";\nexport const ENDPOINTS = {\n  modules_tending: \"modules/trending\",\n  modules_search: \"modules/search\",\n  public_converse: \"public/converse\",\n  modules_featured: \"modules/featured\",\n  modules_justreleased: \"modules/justreleased\"\n};\nexport const moduleTending = () => {\n  return post(`/${ENDPOINTS.modules_tending}`);\n};\nexport const moduleSearch = data => {\n  return post(`/${ENDPOINTS.modules_search}`, data);\n};\nexport const moduleJustreleased = () => {\n  return post(`/${ENDPOINTS.modules_justreleased}`);\n};\nexport const moduleFeatured = () => {\n  return post(`/${ENDPOINTS.modules_featured}`);\n};\nexport const moduleConverse = data => {\n  return post(`/${ENDPOINTS.public_converse}`, data);\n};\nexport const fetchStreamData = async (payload, setData) => {\n  const headers = {\n    Accept: 'text/event-stream',\n    'Cache-Control': 'no-cache'\n  };\n  const response = await stream(`/${ENDPOINTS.public_converse}`, payload, headers);\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n  if (!response.ok) {\n    throw new Error(await response.text());\n  }\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder();\n  let result = '';\n  while (true) {\n    const {\n      done,\n      value\n    } = await reader.read();\n    if (done) break;\n    result += decoder.decode(value, {\n      stream: true\n    });\n    setData(result); // Update state with the latest result\n  }\n  return result;\n};\nexport const fetchConvDataGrok = async (input, setData) => {\n  const response = await fetch('https://api.x.ai/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${process.env.REACT_APP_GROKAI_API_KEY}`\n    },\n    body: JSON.stringify({\n      messages: [{\n        role: \"user\",\n        content: input\n      }],\n      model: \"grok-3-latest\",\n      stream: true,\n      // Enable streaming\n      temperature: 0\n    })\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Error: ${errorText}`);\n  }\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder(\"utf-8\");\n  console.log('--------------');\n  let result = '';\n  // Read the stream\n  while (true) {\n    const {\n      done,\n      value\n    } = await reader.read();\n    if (done) break;\n    const chunk = decoder.decode(value, {\n      stream: true\n    });\n    const lines = chunk.split('\\n');\n    for (const line of lines) {\n      if (line.startsWith('data: ')) {\n        var _parsedChunk$choices$, _parsedChunk$choices$2;\n        const jsonData = line.slice(6);\n        const parsedChunk = JSON.parse(jsonData);\n        const messageContent = parsedChunk === null || parsedChunk === void 0 ? void 0 : (_parsedChunk$choices$ = parsedChunk.choices[0]) === null || _parsedChunk$choices$ === void 0 ? void 0 : (_parsedChunk$choices$2 = _parsedChunk$choices$.delta) === null || _parsedChunk$choices$2 === void 0 ? void 0 : _parsedChunk$choices$2.content;\n        if (messageContent) {\n          result += messageContent;\n          setData(result);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  console.log(result);\n  return result; // Return the final result\n};\nexport const moduleConverseStream = async payload => {\n  const headers = {\n    Accept: 'text/event-stream',\n    'Cache-Control': 'no-cache'\n  };\n  const responseStream = await stream(`/${ENDPOINTS.public_converse}`, payload, headers);\n  const reader = responseStream.getReader();\n  return new Promise(async resolve => {\n    let fullMessage = \"\";\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) break;\n      fullMessage += value;\n      console.log(\"Chunk received:\", value); // Stream updates in real time\n    }\n    resolve(fullMessage);\n  });\n};","map":{"version":3,"names":["post","stream","ENDPOINTS","modules_tending","modules_search","public_converse","modules_featured","modules_justreleased","moduleTending","moduleSearch","data","moduleJustreleased","moduleFeatured","moduleConverse","fetchStreamData","payload","setData","headers","Accept","response","ok","Error","text","reader","body","getReader","decoder","TextDecoder","result","done","value","read","decode","fetchConvDataGrok","input","fetch","method","Authorization","process","env","REACT_APP_GROKAI_API_KEY","JSON","stringify","messages","role","content","model","temperature","errorText","console","log","chunk","lines","split","line","startsWith","_parsedChunk$choices$","_parsedChunk$choices$2","jsonData","slice","parsedChunk","parse","messageContent","choices","delta","moduleConverseStream","responseStream","Promise","resolve","fullMessage"],"sources":["/Users/angelagu/Downloads/aiyogi-main/src/pages/home/home.api.jsx"],"sourcesContent":["import { post, stream } from \"../../services/api\";\n\nexport const ENDPOINTS = {\n   modules_tending: \"modules/trending\",\n   modules_search: \"modules/search\",\n   public_converse: \"public/converse\",\n   modules_featured: \"modules/featured\",\n   modules_justreleased: \"modules/justreleased\",\n}\n\nexport const moduleTending = () => {\n   return post(`/${ENDPOINTS.modules_tending}`)\n}\nexport const moduleSearch = (data) => {\n   return post(`/${ENDPOINTS.modules_search}`, data)\n}\nexport const moduleJustreleased = () => {\n   return post(`/${ENDPOINTS.modules_justreleased}`)\n}\n\nexport const moduleFeatured = () => {\n   return post(`/${ENDPOINTS.modules_featured}`)\n}\n\nexport const moduleConverse = (data) => {\n   return post(`/${ENDPOINTS.public_converse}`, data)\n}\n\nexport const fetchStreamData = async (payload, setData) => {\n\n   const headers = {\n      Accept: 'text/event-stream',\n      'Cache-Control': 'no-cache',\n   }\n\n   const response = await stream(`/${ENDPOINTS.public_converse}`, payload, headers);\n   if (!response.ok) {\n      throw new Error(await response.text());\n   }\n\n   if (!response.ok) {\n      throw new Error(await response.text());\n   }\n\n   const reader = response.body.getReader();\n   const decoder = new TextDecoder();\n\n   let result = '';\n\n   while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n      result += decoder.decode(value, { stream: true });\n      setData(result); // Update state with the latest result\n   }\n   return result;\n};\n\nexport const fetchConvDataGrok = async (input, setData) => {\n   const response = await fetch('https://api.x.ai/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n         \"Content-Type\": \"application/json\",\n         Authorization: `Bearer ${process.env.REACT_APP_GROKAI_API_KEY}`,\n      },\n      body: JSON.stringify({\n         messages: [\n            {\n               role: \"user\",\n               content: input,\n            },\n         ],\n         model: \"grok-3-latest\",\n         stream: true, // Enable streaming\n         temperature: 0,\n      }),\n   });\n   if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Error: ${errorText}`);\n   }\n   const reader = response.body.getReader();\n   const decoder = new TextDecoder(\"utf-8\");\n   console.log('--------------');\n   let result = '';\n   // Read the stream\n   while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n      const chunk = decoder.decode(value, { stream: true });\n      const lines = chunk.split('\\n');\n      for (const line of lines) {\n         if (line.startsWith('data: ')) {\n            const jsonData = line.slice(6);\n            const parsedChunk = JSON.parse(jsonData);\n            const messageContent = parsedChunk?.choices[0]?.delta?.content;\n            if (messageContent) {\n               result += messageContent;\n               setData(result);\n            } else {\n               break;\n            }\n         }\n      }\n   }\n   console.log(result);\n   return result; // Return the final result\n}\n\nexport const moduleConverseStream = async (payload) => {\n   const headers = {\n      Accept: 'text/event-stream',\n      'Cache-Control': 'no-cache',\n   }\n\n   const responseStream = await stream(`/${ENDPOINTS.public_converse}`, payload, headers);\n   const reader = responseStream.getReader();\n\n   return new Promise(async (resolve) => {\n      let fullMessage = \"\";\n      while (true) {\n         const { done, value } = await reader.read();\n         if (done) break;\n         fullMessage += value;\n         console.log(\"Chunk received:\", value); // Stream updates in real time\n      }\n      resolve(fullMessage);\n   });\n} "],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,QAAQ,oBAAoB;AAEjD,OAAO,MAAMC,SAAS,GAAG;EACtBC,eAAe,EAAE,kBAAkB;EACnCC,cAAc,EAAE,gBAAgB;EAChCC,eAAe,EAAE,iBAAiB;EAClCC,gBAAgB,EAAE,kBAAkB;EACpCC,oBAAoB,EAAE;AACzB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAChC,OAAOR,IAAI,CAAC,IAAIE,SAAS,CAACC,eAAe,EAAE,CAAC;AAC/C,CAAC;AACD,OAAO,MAAMM,YAAY,GAAIC,IAAI,IAAK;EACnC,OAAOV,IAAI,CAAC,IAAIE,SAAS,CAACE,cAAc,EAAE,EAAEM,IAAI,CAAC;AACpD,CAAC;AACD,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EACrC,OAAOX,IAAI,CAAC,IAAIE,SAAS,CAACK,oBAAoB,EAAE,CAAC;AACpD,CAAC;AAED,OAAO,MAAMK,cAAc,GAAGA,CAAA,KAAM;EACjC,OAAOZ,IAAI,CAAC,IAAIE,SAAS,CAACI,gBAAgB,EAAE,CAAC;AAChD,CAAC;AAED,OAAO,MAAMO,cAAc,GAAIH,IAAI,IAAK;EACrC,OAAOV,IAAI,CAAC,IAAIE,SAAS,CAACG,eAAe,EAAE,EAAEK,IAAI,CAAC;AACrD,CAAC;AAED,OAAO,MAAMI,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,KAAK;EAExD,MAAMC,OAAO,GAAG;IACbC,MAAM,EAAE,mBAAmB;IAC3B,eAAe,EAAE;EACpB,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMlB,MAAM,CAAC,IAAIC,SAAS,CAACG,eAAe,EAAE,EAAEU,OAAO,EAAEE,OAAO,CAAC;EAChF,IAAI,CAACE,QAAQ,CAACC,EAAE,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;EACzC;EAEA,IAAI,CAACH,QAAQ,CAACC,EAAE,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;EACzC;EAEA,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,IAAI,CAACC,SAAS,CAAC,CAAC;EACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;EAEjC,IAAIC,MAAM,GAAG,EAAE;EAEf,OAAO,IAAI,EAAE;IACV,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMP,MAAM,CAACQ,IAAI,CAAC,CAAC;IAC3C,IAAIF,IAAI,EAAE;IACVD,MAAM,IAAIF,OAAO,CAACM,MAAM,CAACF,KAAK,EAAE;MAAE7B,MAAM,EAAE;IAAK,CAAC,CAAC;IACjDe,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC;EACpB;EACA,OAAOA,MAAM;AAChB,CAAC;AAED,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAOC,KAAK,EAAElB,OAAO,KAAK;EACxD,MAAMG,QAAQ,GAAG,MAAMgB,KAAK,CAAC,sCAAsC,EAAE;IAClEC,MAAM,EAAE,MAAM;IACdnB,OAAO,EAAE;MACN,cAAc,EAAE,kBAAkB;MAClCoB,aAAa,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,wBAAwB;IAChE,CAAC;IACDhB,IAAI,EAAEiB,IAAI,CAACC,SAAS,CAAC;MAClBC,QAAQ,EAAE,CACP;QACGC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAEX;MACZ,CAAC,CACH;MACDY,KAAK,EAAE,eAAe;MACtB7C,MAAM,EAAE,IAAI;MAAE;MACd8C,WAAW,EAAE;IAChB,CAAC;EACJ,CAAC,CAAC;EACF,IAAI,CAAC5B,QAAQ,CAACC,EAAE,EAAE;IACf,MAAM4B,SAAS,GAAG,MAAM7B,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvC,MAAM,IAAID,KAAK,CAAC,UAAU2B,SAAS,EAAE,CAAC;EACzC;EACA,MAAMzB,MAAM,GAAGJ,QAAQ,CAACK,IAAI,CAACC,SAAS,CAAC,CAAC;EACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;EACxCsB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC7B,IAAItB,MAAM,GAAG,EAAE;EACf;EACA,OAAO,IAAI,EAAE;IACV,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMP,MAAM,CAACQ,IAAI,CAAC,CAAC;IAC3C,IAAIF,IAAI,EAAE;IACV,MAAMsB,KAAK,GAAGzB,OAAO,CAACM,MAAM,CAACF,KAAK,EAAE;MAAE7B,MAAM,EAAE;IAAK,CAAC,CAAC;IACrD,MAAMmD,KAAK,GAAGD,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC;IAC/B,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;MACvB,IAAIE,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,EAAE;QAAA,IAAAC,qBAAA,EAAAC,sBAAA;QAC5B,MAAMC,QAAQ,GAAGJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC;QAC9B,MAAMC,WAAW,GAAGnB,IAAI,CAACoB,KAAK,CAACH,QAAQ,CAAC;QACxC,MAAMI,cAAc,GAAGF,WAAW,aAAXA,WAAW,wBAAAJ,qBAAA,GAAXI,WAAW,CAAEG,OAAO,CAAC,CAAC,CAAC,cAAAP,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAAyBQ,KAAK,cAAAP,sBAAA,uBAA9BA,sBAAA,CAAgCZ,OAAO;QAC9D,IAAIiB,cAAc,EAAE;UACjBlC,MAAM,IAAIkC,cAAc;UACxB9C,OAAO,CAACY,MAAM,CAAC;QAClB,CAAC,MAAM;UACJ;QACH;MACH;IACH;EACH;EACAqB,OAAO,CAACC,GAAG,CAACtB,MAAM,CAAC;EACnB,OAAOA,MAAM,CAAC,CAAC;AAClB,CAAC;AAED,OAAO,MAAMqC,oBAAoB,GAAG,MAAOlD,OAAO,IAAK;EACpD,MAAME,OAAO,GAAG;IACbC,MAAM,EAAE,mBAAmB;IAC3B,eAAe,EAAE;EACpB,CAAC;EAED,MAAMgD,cAAc,GAAG,MAAMjE,MAAM,CAAC,IAAIC,SAAS,CAACG,eAAe,EAAE,EAAEU,OAAO,EAAEE,OAAO,CAAC;EACtF,MAAMM,MAAM,GAAG2C,cAAc,CAACzC,SAAS,CAAC,CAAC;EAEzC,OAAO,IAAI0C,OAAO,CAAC,MAAOC,OAAO,IAAK;IACnC,IAAIC,WAAW,GAAG,EAAE;IACpB,OAAO,IAAI,EAAE;MACV,MAAM;QAAExC,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMP,MAAM,CAACQ,IAAI,CAAC,CAAC;MAC3C,IAAIF,IAAI,EAAE;MACVwC,WAAW,IAAIvC,KAAK;MACpBmB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEpB,KAAK,CAAC,CAAC,CAAC;IAC1C;IACAsC,OAAO,CAACC,WAAW,CAAC;EACvB,CAAC,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}