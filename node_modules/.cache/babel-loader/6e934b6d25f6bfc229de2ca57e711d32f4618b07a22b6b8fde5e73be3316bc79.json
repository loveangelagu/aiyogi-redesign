{"ast":null,"code":"import axios from \"axios\";\nconst BASEURL = process.env.REACT_APP_API_URL;\nexport const get = url => {\n  return axios.get(url);\n};\nexport const post = (endpoint, data, headers) => {\n  return axios.post(`${BASEURL}${endpoint}`, data, {\n    headers\n  });\n};\nexport const stream = async (endpoint, body, headers) => {\n  return await fetch(`${BASEURL}${endpoint}`, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers\n  });\n\n  // if (!response.ok) throw new Error(await response.text());\n\n  // const reader = response.body.getReader();\n  // const decoder = new TextDecoder();\n\n  // return new ReadableStream({\n  //     async start(controller) {\n  //         while (true) {\n  //             const { done, value } = await reader.read();\n  //             if (done) {\n  //                 controller.close();\n  //                 break;\n  //             }\n  //             console.log(\"Chunk received:\", value); // Stream updates in real time   \n  //             controller.enqueue(decoder.decode(value, { stream: true }));\n  //         }\n  //     }\n  // });\n};","map":{"version":3,"names":["axios","BASEURL","process","env","REACT_APP_API_URL","get","url","post","endpoint","data","headers","stream","body","fetch","method","JSON","stringify"],"sources":["/Users/angelagu/Downloads/aiyogi-main/src/services/api.jsx"],"sourcesContent":["import axios from \"axios\"\nconst BASEURL = process.env.REACT_APP_API_URL;\n\nexport const get = (url) => {\n    return axios.get(url)\n}\n\nexport const post = (endpoint, data, headers) => {\n    return axios.post(`${BASEURL}${endpoint}`, data, {headers});\n}\n\nexport const stream = async (endpoint, body, headers) => {\n    return await fetch(`${BASEURL}${endpoint}`, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers\n    });\n\n    // if (!response.ok) throw new Error(await response.text());\n\n    // const reader = response.body.getReader();\n    // const decoder = new TextDecoder();\n\n    // return new ReadableStream({\n    //     async start(controller) {\n    //         while (true) {\n    //             const { done, value } = await reader.read();\n    //             if (done) {\n    //                 controller.close();\n    //                 break;\n    //             }\n    //             console.log(\"Chunk received:\", value); // Stream updates in real time   \n    //             controller.enqueue(decoder.decode(value, { stream: true }));\n    //         }\n    //     }\n    // });\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,GAAG,GAAIC,GAAG,IAAK;EACxB,OAAON,KAAK,CAACK,GAAG,CAACC,GAAG,CAAC;AACzB,CAAC;AAED,OAAO,MAAMC,IAAI,GAAGA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC7C,OAAOV,KAAK,CAACO,IAAI,CAAC,GAAGN,OAAO,GAAGO,QAAQ,EAAE,EAAEC,IAAI,EAAE;IAACC;EAAO,CAAC,CAAC;AAC/D,CAAC;AAED,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOH,QAAQ,EAAEI,IAAI,EAAEF,OAAO,KAAK;EACrD,OAAO,MAAMG,KAAK,CAAC,GAAGZ,OAAO,GAAGO,QAAQ,EAAE,EAAE;IACxCM,MAAM,EAAE,MAAM;IACdF,IAAI,EAAEG,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;IAC1BF;EACJ,CAAC,CAAC;;EAEF;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}